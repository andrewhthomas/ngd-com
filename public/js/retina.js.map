{"version":3,"sources":["retina.js"],"names":[],"mappingsfile":"retina.js","sourcesContent":["(function() {\n\n  var root = (typeof exports == 'undefined' ? window : exports);\n\n  var config = {\n    // Ensure Content-Type is an image before trying to load @2x image\n    // https://github.com/imulus/retinajs/pull/45)\n    check_mime_type: true\n  };\n\n\n\n  root.Retina = Retina;\n\n  function Retina() {}\n\n  Retina.configure = function(options) {\n    if (options == null) options = {};\n    for (var prop in options) config[prop] = options[prop];\n  };\n\n  Retina.init = function(context) {\n    if (context == null) context = root;\n\n    var existing_onload = context.onload || new Function;\n\n    context.onload = function() {\n      var images = document.getElementsByTagName(\"img\"), retinaImages = [], i, image;\n      for (i = 0; i < images.length; i++) {\n        image = images[i];\n        retinaImages.push(new RetinaImage(image));\n      }\n      existing_onload();\n    }\n  };\n\n  Retina.isRetina = function(){\n    var mediaQuery = \"(-webkit-min-device-pixel-ratio: 1.5),\\\n                      (min--moz-device-pixel-ratio: 1.5),\\\n                      (-o-min-device-pixel-ratio: 3/2),\\\n                      (min-resolution: 1.5dppx)\";\n\n    if (root.devicePixelRatio > 1)\n      return true;\n\n    if (root.matchMedia && root.matchMedia(mediaQuery).matches)\n      return true;\n\n    return false;\n  };\n\n\n  root.RetinaImagePath = RetinaImagePath;\n\n  function RetinaImagePath(path, at_2x_path) {\n    this.path = path;\n    if (typeof at_2x_path !== \"undefined\" && at_2x_path !== null) {\n      this.at_2x_path = at_2x_path;\n      this.perform_check = false;\n    } else {\n      this.at_2x_path = path.replace(/\\.\\w+$/, function(match) { return \"@2x\" + match; });\n      this.perform_check = true;\n    }\n  }\n\n  RetinaImagePath.confirmed_paths = [];\n\n  RetinaImagePath.prototype.is_external = function() {\n    return !!(this.path.match(/^https?\\:/i) && !this.path.match('//' + document.domain) )\n  }\n\n  RetinaImagePath.prototype.check_2x_variant = function(callback) {\n    var http, that = this;\n    if (this.is_external()) {\n      return callback(false);\n    } else if (!this.perform_check && typeof this.at_2x_path !== \"undefined\" && this.at_2x_path !== null) {\n      return callback(true);\n    } else if (this.at_2x_path in RetinaImagePath.confirmed_paths) {\n      return callback(true);\n    } else {\n      http = new XMLHttpRequest;\n      http.open('HEAD', this.at_2x_path);\n      http.onreadystatechange = function() {\n        if (http.readyState != 4) {\n          return callback(false);\n        }\n\n        if (http.status >= 200 && http.status <= 399) {\n          if (config.check_mime_type) {\n            var type = http.getResponseHeader('Content-Type');\n            if (type == null || !type.match(/^image/i)) {\n              return callback(false);\n            }\n          }\n\n          RetinaImagePath.confirmed_paths.push(that.at_2x_path);\n          return callback(true);\n        } else {\n          return callback(false);\n        }\n      }\n      http.send();\n    }\n  }\n\n\n\n  function RetinaImage(el) {\n    this.el = el;\n    this.path = new RetinaImagePath(this.el.getAttribute('src'), this.el.getAttribute('data-at2x'));\n    var that = this;\n    this.path.check_2x_variant(function(hasVariant) {\n      if (hasVariant) that.swap();\n    });\n  }\n\n  root.RetinaImage = RetinaImage;\n\n  RetinaImage.prototype.swap = function(path) {\n    if (typeof path == 'undefined') path = this.path.at_2x_path;\n\n    var that = this;\n    function load() {\n      if (! that.el.complete) {\n        setTimeout(load, 5);\n      } else {\n        that.el.setAttribute('width', that.el.offsetWidth);\n        that.el.setAttribute('height', that.el.offsetHeight);\n        that.el.setAttribute('src', path);\n      }\n    }\n    load();\n  }\n\n\n\n\n  if (Retina.isRetina()) {\n    Retina.init(root);\n  }\n\n})();\n\n"],"sourceRoot":"/source/"}